stages:
  - lint
  - test
  - check
  - build
#  - release

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  cache:
    paths:
      - .go/pkg/mod/

lint:
  image: golangci/golangci-lint:latest
  stage: lint
  extends:
    - .go-cache
  allow_failure: true
  script:
    - cd backend
    - golangci-lint run -v

test:
  image: golang:latest
  stage: test
  script:
    - cd backend
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet  -json $(go list ./... | grep -v /vendor/) | tee vet-report.json
    - go test -race -coverprofile=coverage.out -json $(go list ./... | grep -v /vendor/) | tee test-report.json
  artifacts:
    when: always
    paths:
      - backend/vet-report.json
      - backend/test-report.json
      - backend/coverage.out
    expire_in: 1 hour

build-for-check:
  image: golang:latest
  stage: check
  script:
    - cd backend
    - go build ./...
  artifacts:
    untracked: true
    expire_in: 1 hour

sonarcloud-check:
  allow_failure: true
  stage: check
  needs:
    - job: build-for-check
      artifacts: true
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd backend
    - sonar-scanner

build-image:
  stage: build
  services:
    - docker:dind
  image: docker:latest
  before_script:
      - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
      - cd backend
      - docker build -t ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} .
      - docker push ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
      - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}:latest
      - docker push ${CI_REGISTRY_IMAGE}:latest


#  script:
#    - |
#      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#        tag=""
#        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
#      else
#        tag=":$CI_COMMIT_REF_SLUG"
#        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
#      fi
#    - docker build -t "$CI_REGISTRY_IMAGE${tag}" .
#    - docker push "$CI_REGISTRY_IMAGE${tag}"
#  rules:
#    - if: $CI_COMMIT_BRANCH
#      exists:
#        - Dockerfile
