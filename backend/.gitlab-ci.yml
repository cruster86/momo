stages:
  - lint
  - test
  - pre-build
  - check
#  - build
#  - release

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  cache:
    paths:
      - .go/pkg/mod/

lint:
  image: golangci/golangci-lint:latest
  stage: lint
  extends:
    - .go-cache
  allow_failure: true
  script:
    - cd backend
    - golangci-lint run -v

test:
  image: golang:latest
  stage: test
  script:
    - cd backend
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet  -json $(go list ./... | grep -v /vendor/) | tee vet-report.json
    - go test -race -coverprofile=coverage.out -json $(go list ./... | grep -v /vendor/) | tee test-report.json
  artifacts:
    when: always
    paths:
      - vet-report.json
      - test-report.json
      - coverage.out
    expire_in: 1 hour

build-for-check:
  image: golang:latest
  stage: pre-build
  script:
    - go build ./...
  artifacts:
    untracked: true
    expire_in: 1 hour

sonarcloud-check:
  stage: check
  needs:
    - job: test
      artifacts: true
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
