stages:
#  - lint
#  - test
#  - check
  - build
  - scan

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

#lint:
#  image: gitlab.praktikum-services.ru:5050/zerodistance/momo-store/golangci-lint:latest
#  stage: lint
#  variables:
#    GOPATH: $CI_PROJECT_DIR/.go
#  cache:
#    paths:
#      - .go/pkg/mod/
#  allow_failure: true
#  script:
#    - cd backend
#    - golangci-lint run -v
#
#test:
#  image: gitlab.praktikum-services.ru:5050/zerodistance/momo-store/golang:latest
#  stage: test
#  script:
#    - cd backend
#    - go fmt $(go list ./... | grep -v /vendor/)
#    - go vet  -json $(go list ./... | grep -v /vendor/) | tee vet-report.json
#    - go test -race -coverprofile=coverage.out -json $(go list ./... | grep -v /vendor/) | tee test-report.json
#  artifacts:
#    when: always
#    paths:
#      - backend/vet-report.json
#      - backend/test-report.json
#      - backend/coverage.out
#    expire_in: 1 hour
#
#build_for_check:
#  image: gitlab.praktikum-services.ru:5050/zerodistance/momo-store/golang:latest
#  stage: check
#  script:
#    - cd backend
#    - go build ./...
#  artifacts:
#    untracked: true
#    expire_in: 1 hour
#
#sonarcloud_check:
#  allow_failure: true
#  stage: check
#  needs:
#    - job: build-for-check
#      artifacts: true
#  image:
#    name: gitlab.praktikum-services.ru:5050/zerodistance/momo-store/sonar-scanner-cli:latest
#    entrypoint: [""]
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
#    GIT_DEPTH: "0"
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - set -x
#    - cd backend
#    - sonar-scanner

build_image:
  when: manual
  stage: build
  image: gitlab.praktikum-services.ru:5050/zerodistance/momo-store/docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - set -x
    - cd backend
    - docker build -t $CI_REGISTRY_IMAGE/momo-store-backend:${VERSION} .
    - docker push $CI_REGISTRY_IMAGE/momo-store-backend:${VERSION}

security_scan:
  needs: 
    - job: build-image
  stage: scan
  image: 
    name: aquasec/trivy:latest
    entrypoint: [""]
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - trivy --quiet image --no-progress --severity HIGH,CRITICAL --scanners vuln --output backend-scan-report.txt
      $CI_REGISTRY_IMAGE/momo-store-frontend:${VERSION}
  artifacts:
    expire_in: 1 hour
    reports:
      container_scanning: backend-scan-report.txt
